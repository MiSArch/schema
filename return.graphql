schema @link(import : ["@key", "@shareable", "FieldSet"], url : "https://specs.apollo.dev/federation/v2.5"){
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"An object with an ID."
interface Node {
  "The ID of the node."
  id: UUID!
}

union _Entity = Order | OrderItem

type Mutation {
  "Create a new return"
  createReturn(
    "Input for the createReturn mutation"
    input: CreateReturnInput!
  ): Return!
}

"An order."
type Order implements Node @key(fields : "id", resolvable : true) {
  "The ID of the node."
  id: UUID!
}

"An order item."
type OrderItem implements Node @key(fields : "id", resolvable : true) {
  "The ID of the node."
  id: UUID!
  "The return this order item was returned with."
  returnedWith: Return
}

"A connection to a list of `OrderItem` values."
type OrderItemConnection @shareable {
  "Whether this connection has a next page"
  hasNextPage: Boolean!
  "The resulting items."
  nodes: [OrderItem!]!
  "The total amount of items in this connection"
  totalCount: Int!
}

type Query {
  "Union of all types that use the @key directive, including both types native to the schema and extended types"
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

"A return."
type Return implements Node {
  "The time the return was created."
  createdAt: DateTime!
  "The ID of the node."
  id: UUID!
  "The order this return is for."
  order: Order!
  "The reason for the return."
  reason: String!
  "The amount of money refunded."
  refundedAmount: Int!
  "Get all order items returned with this return"
  returnedItems(
    "Number of items to return"
    first: Int,
    "Ordering"
    orderBy: CommonOrderInput,
    "Number of items to skip"
    skip: Int
  ): OrderItemConnection!
}

type _Service {
  sdl: String!
}

"Common order fields"
enum CommonOrderField {
  "Order entities by their id"
  ID
}

"Order direction"
enum OrderDirection {
  "Ascending order"
  ASC
  "Descending order"
  DESC
}

"A slightly refined version of RFC-3339 compliant DateTime Scalar"
scalar DateTime

"Federation type representing set of fields"
scalar FieldSet

"A universally unique identifier compliant UUID Scalar"
scalar UUID

"Federation scalar type used to represent any external entities passed to _entities query."
scalar _Any

"Discount order"
input CommonOrderInput {
  "The direction to order by"
  direction: OrderDirection
  "The field to order by"
  field: CommonOrderField
}

"Input for the createReturn mutation"
input CreateReturnInput {
  "The order items to return, must belong to the same order and must not be already returned."
  orderItemIds: [UUID!]!
  "The reason for the return."
  reason: String!
}
