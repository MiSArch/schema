schema @link(url: "https://specs.apollo.dev/federation/v2.5", import: ["@shareable", "@key", "@inaccessible", "FieldSet"]) {
  query: Query
  mutation: Mutation
}

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @shareable repeatable on OBJECT | FIELD_DEFINITION

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar link__Import

input CreateReviewInput {
  """UUID of user owning the review."""
  userId: UUID!
  """UUID of product variant in review."""
  productVariantId: UUID!
  """Body of Review."""
  body: String!
  """Rating of Review in 1-5 stars."""
  rating: Rating!
  """Flag if review is visible, by default set to true."""
  isVisible: Boolean
}

scalar DateTime

type Mutation {
  """
  Adds a review for a user and a product variant with a content, rating and visibility.
  """
  createReview(
    """CreateReviewInput"""
    input: CreateReviewInput!
  ): Review!
  """Updates a specific review referenced with an id."""
  updateReview(
    """UpdateReviewInput"""
    input: UpdateReviewInput!
  ): Review!
  """Deletes review of id."""
  deleteReview(
    """UUID of review to delete."""
    id: UUID!
  ): Boolean!
}

"""GraphQL order direction."""
enum OrderDirection {
  """Ascending order direction."""
  ASC
  """Descending order direction."""
  DESC
}

type Product @key(fields: "id") {
  """UUID of the product."""
  id: UUID!
  """Retrieves reviews of product."""
  reviews(
    """Describes that the `first` N reviews should be retrieved."""
    first: Int
    """Describes how many reviews should be skipped at the beginning."""
    skip: Int
    """Specifies the order in which reviews are retrieved."""
    orderBy: ReviewOrderInput
  ): ReviewConnection!
  """Retrieves average rating of product."""
  averageRating: Float!
}

type ProductVariant @key(fields: "id") {
  """Product variant UUID."""
  id: UUID!
  """Retrieves reviews of product variant."""
  reviews(
    """Describes that the `first` N reviews should be retrieved."""
    first: Int
    """Describes how many reviews should be skipped at the beginning."""
    skip: Int
    """Specifies the order in which reviews are retrieved."""
    orderBy: ReviewOrderInput
  ): ReviewConnection!
  """Retrieves average rating of product variant."""
  averageRating: Float!
}

type Query {
  """Retrieves all reviews."""
  reviews(
    """Describes that the `first` N reviews should be retrieved."""
    first: Int
    """Describes how many reviews should be skipped at the beginning."""
    skip: Int
    """Specifies the order in which reviews are retrieved."""
    orderBy: ReviewOrderInput
  ): ReviewConnection!
  """Retrieves review of specific id."""
  review(
    """UUID of review to retrieve."""
    id: UUID!
  ): Review!
  _entities(representations: [_Any!]!): [_Entity]!
}

enum Rating {
  ONE_STARS
  TWO_STARS
  THREE_STARS
  FOUR_STARS
  FIVE_STARS
}

"""The Review of a user."""
type Review @shareable {
  """Review UUID."""
  id: UUID!
  """User."""
  user: User!
  """Product variant that review is about."""
  productVariant: ProductVariant!
  """Body of Review."""
  body: String!
  """Rating of Review in 1-5 stars."""
  rating: Rating!
  """Timestamp when Review was created."""
  createdAt: DateTime!
  """Timestamp when Review was created."""
  lastUpdatedAt: DateTime!
  """Flag if review is visible,"""
  isVisible: Boolean!
}

"""A connection of Reviews."""
type ReviewConnection @shareable {
  """The resulting entities."""
  nodes: [Review!]!
  """Whether this connection has a next page."""
  hasNextPage: Boolean!
  """The total amount of items in this connection."""
  totalCount: Int!
}

"""Describes the fields that a review can be ordered by."""
enum ReviewOrderField {
  """Orders by "id"."""
  ID
  """Orders by "user_id"."""
  USER_ID
  """Orders by "product_variant"."""
  PRODUCT_VARIANT
  """Orders by "rating"."""
  RATING
  """Orders by "created_at"."""
  CREATED_AT
}

"""Specifies the order of reviews."""
input ReviewOrderInput {
  """Order direction of reviews."""
  direction: OrderDirection
  """Field that reviews should be ordered by."""
  field: ReviewOrderField
}

scalar UUID

input UpdateReviewInput {
  """UUID of review to update."""
  id: UUID!
  """Body of Review to update."""
  body: String
  """Rating of Review in 1-5 stars to update."""
  rating: Rating
  """Flag if review is visible."""
  isVisible: Boolean
}

"""Type of a user owning reviews."""
type User @key(fields: "id") {
  """UUID of the user."""
  id: UUID!
  """Retrieves reviews of user."""
  reviews(
    """Describes that the `first` N reviews should be retrieved."""
    first: Int
    """Describes how many reviews should be skipped at the beginning."""
    skip: Int
    """Specifies the order in which reviews are retrieved."""
    orderBy: ReviewOrderInput
  ): ReviewConnection!
}

scalar _Any

scalar FieldSet

union _Entity = Product | ProductVariant | User