schema @link(import : ["@key", "FieldSet"], url : "https://specs.apollo.dev/federation/v2.5"){
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Space separated list of primary keys needed to access federated object"
directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

"Links definitions within the document to external schemas."
directive @link(as: String, import: [link__Import], url: String!) repeatable on SCHEMA

"Indicates an Input Object is a OneOf Input Object."
directive @oneOf on INPUT_OBJECT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"An object with an ID."
interface Node {
  "The ID of the node."
  id: UUID!
}

union _Entity = User

type Mutation {
  "Create TEST user"
  createTestUser(
    "Definition of the Test user"
    input: CreateUserDTOInput!
  ): User!
}

type Query {
  "Union of all types that use the @key directive, including both types native to the schema and extended types"
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  "Get a user by id"
  user(
    "The id of the user"
    id: UUID!
  ): User!
}

"A user."
type User implements Node @key(fields : "id", resolvable : true) {
  "The birthday of the user"
  birthday: Date
  "The date the user joined"
  dateJoined: DateTime!
  "The gender of the user"
  gender: Gender
  "The ID of the node."
  id: UUID!
  "The name of the user"
  name: String!
  "The username of the user"
  username: String!
}

type _Service {
  sdl: String!
}

"The gender of a user"
enum Gender {
  "Diverse gender"
  DIVERSE
  "Female gender"
  FEMALE
  "Male gender"
  MALE
  "Other gender"
  OTHER
}

"An RFC-3339 compliant Full Date Scalar"
scalar Date

"A slightly refined version of RFC-3339 compliant DateTime Scalar"
scalar DateTime

"Federation type representing set of fields"
scalar FieldSet

"A universally unique identifier compliant UUID Scalar"
scalar UUID

"Federation scalar type used to represent any external entities passed to _entities query."
scalar _Any

scalar link__Import

input CreateUserDTOInput {
  name: String!
  username: String!
}
